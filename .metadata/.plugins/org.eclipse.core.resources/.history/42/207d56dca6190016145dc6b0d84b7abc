package com.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.service.*;
import com.model.*;

@Controller
@RequestMapping("/rest/cart")
public class CartResourceController {
	
	 @Autowired(required=true)
	 @Qualifier
    CartService cartService;

	    @Autowired(required=true)
		 @Qualifier
	     ItemService cartItemService;

	   
	    @Autowired
	    ProductService productService;

	    @RequestMapping("/{cartId}")
	    public @ResponseBody Cart getCartById(@PathVariable(value = "cartId") int cartId){
	        return cartService.getCartById(cartId);
	    }

	    @RequestMapping(value = "/add/{productId}", method = RequestMethod.PUT)
	    @ResponseStatus(value = HttpStatus.NO_CONTENT)
	    public void addItem (@PathVariable(value = "productId") int productId){
	    	
	    	Cart cart=new Cart();
	        Product product = productService.getProductById(productId);
	        List<Item> cartItems = cart.getCartItems();

	        for (int i=0; i < cartItems.size(); i++){
	            if(product.getId() == cartItems.get(i).getProduct().getId()){
	                Item cartItem = cartItems.get(i);
	                cartItem.setQuantity(cartItem.getQuantity() + 1);
	                cartItem.setTotalPrice(Float.parseFloat(product.getPrice())*cartItem.getQuantity());
	                cartItemService.addCartItem(cartItem);

	                return;
	            }
	        }

	        Item cartItem = new Item();
	        cartItem.setProduct(product);
	        cartItem.setQuantity(1);
	        cartItem.setTotalPrice(Float.parseFloat(product.getPrice())*cartItem.getQuantity());
	        cartItem.setCart(cart);
	        cartItemService.addCartItem(cartItem);
	    }

	    @RequestMapping(value = "/remove/{productId}", method = RequestMethod.PUT)
	    @ResponseStatus(value = HttpStatus.NO_CONTENT)
	    public void removeItem(@PathVariable(value = "productId") int productId){
	       Item cartItem = cartItemService.getCartItemByProductId(productId);
	        cartItemService.removeCartItem(cartItem);

	    }

	    @RequestMapping(value = "/{cartId}", method = RequestMethod.DELETE)
	    @ResponseStatus(value = HttpStatus.NO_CONTENT)
	    public void clearCart(@PathVariable(value = "cartId") int cartId){
	        Cart cart = cartService.getCartById(cartId);
	        cartItemService.removeAllCartItems(cart);
	    }
}
