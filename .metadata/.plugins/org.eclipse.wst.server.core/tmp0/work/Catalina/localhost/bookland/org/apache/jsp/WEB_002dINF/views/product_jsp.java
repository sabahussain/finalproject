/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.33
 * Generated at: 2016-05-13 06:26:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class product_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css\"/>\r\n");
      out.write("<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${a}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/bootstrap.min.css\" rel=\"stylesheet\"/>\r\n");
      out.write(" <script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${b}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/jquery-2.2.3.min.js\">\r\n");
      out.write(" </script>\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${b}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/bootstrap.min.js\">\r\n");
      out.write("</script>\r\n");
      out.write("<script src=\"http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js\"></script>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\r\n");
      out.write("<title>Explore Products</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("                   <body ng-app=\"myApp\" style=\"background-color: #FFE4E1;\">\r\n");
      out.write("                   ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp", out, false);
      out.write("\r\n");
      out.write("                   \r\n");
      out.write("                   <script>\r\n");
      out.write("                    angular.module('myApp', [])\r\n");
      out.write("                   .controller('ctrl', function($scope) {\r\n");
      out.write("                    $scope.book =");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${listproduct}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("  \r\n");
      out.write("                   });\r\n");
      out.write("                  </script>\r\n");
      out.write("                     <div class=\"container\"> \r\n");
      out.write("                     \r\n");
      out.write("                         <div class=\"form-group form-group-sm\">\r\n");
      out.write("                          <div class=\"col-sm-10\">\r\n");
      out.write("                          <input type=\"text\" class=\"form-control\" placeholder=\"Search\"  ng-model=\"searchBooks\">\r\n");
      out.write("                           </div>\r\n");
      out.write("                           </div>\r\n");
      out.write("                           </div>\r\n");
      out.write("                         \r\n");
      out.write("                         <div ng-app=\"myApp\" ng-controller=\"ctrl\"  class=\"container\" style=\"padding-top:60px\">\r\n");
      out.write("                       \r\n");
      out.write("                         <table style=\"width:100%\" border=\"1\" class=\"table table-striped table-responsive\">\r\n");
      out.write("\r\n");
      out.write("                      <tr>\r\n");
      out.write("                      <th>ID</th>\r\n");
      out.write("                      <th>Name</th> \r\n");
      out.write("                      <th>Author</th>\r\n");
      out.write("                      <th>Description</th>\r\n");
      out.write("                      <th>Price</th>\r\n");
      out.write("                      <th>Category</th>\r\n");
      out.write("                      <th>Click To Explore</th>\r\n");
      out.write("                       </tr>\r\n");
      out.write("                       <tbody>\r\n");
      out.write("                         <tr ng-repeat=\"x in book | orderBy:'id' | filter:searchBooks\">\r\n");
      out.write("                         <td>{{ x.id }}</td>\r\n");
      out.write("                         <td>{{ x.name }}</td>\r\n");
      out.write("                       <td>{{ x.author}}</td>\r\n");
      out.write("                       <td>{{ x.description}}</td>\r\n");
      out.write("                       <td><i class=\"fa fa-inr\"></i>{{ x.price}}</td>\r\n");
      out.write("                       <td>{{ x.category}}</td>\r\n");
      out.write("                         <td><form action=\"productdetails\" method=\"post\">\r\n");
      out.write("                          <input type=\"hidden\" name=\"id\" value={{x.id}}>\r\n");
      out.write("                         <input type=\"hidden\" name=\"name\" value={{x.name}}>\r\n");
      out.write("                         <input type=\"hidden\" name=\"author\" value={{x.author}}>\r\n");
      out.write("                         <input type=\"hidden\" name=\"description\" value={{x.description}}>\r\n");
      out.write("                          <input type=\"hidden\" name=\"price\" value={{x.price}}>\r\n");
      out.write("                          <input type=\"hidden\" name=\"category\" value={{x.category}}>\r\n");
      out.write("                         <button type=\"submit\"  class=\"btn btn-success btn-lg\">\r\n");
      out.write("                         <span class=\"glyphicon glyphicon-plus-sign\"></span>\r\n");
      out.write("                         </button>\r\n");
      out.write("                         </form>\r\n");
      out.write("                        </td>\r\n");
      out.write("                       </tr>\r\n");
      out.write("                       </tbody>\r\n");
      out.write("                       </table>\r\n");
      out.write("                       </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
